{"version":3,"file":"static/js/756.d310791f.chunk.js","mappings":"gQAYMA,EAAaC,EAAAA,KAAaC,MAAM,CACpCC,KAAMF,EAAAA,KAAaG,IAAI,IAAIC,SAAS,YACpCC,MAAOL,EAAAA,KAAaK,MAAM,yBAAyBD,SAAS,YAC5DE,SAAUN,EAAAA,KACPO,IAAI,EAAG,sCACPC,QAAQ,QAAS,8BACjBA,QAAQ,QAAS,wCACjBJ,SAAS,cAGDK,EAAe,WAC1B,IAAMC,GAAUC,EAAAA,EAAAA,MAEhB,OACE,SAAC,KAAD,CACEC,cAAe,CACbV,KAAM,GACNG,MAAO,GACPC,SAAU,IAEZO,SAAU,SAACC,EAAQC,GACjBL,GAAQM,EAAAA,EAAAA,IAASF,IACjBC,EAAQE,WACT,EACDC,iBAAkBnB,EAVpB,UAYE,UAAC,KAAD,YACE,UAAC,KAAD,mBAEE,SAAC,KAAD,CAAOG,KAAK,OAAOiB,KAAK,OAAOC,aAAa,SAC5C,SAAC,KAAD,CAAclB,KAAK,OAAOmB,UAAU,YAEtC,UAAC,KAAD,oBAEE,SAAC,KAAD,CAAOnB,KAAK,QAAQiB,KAAK,OAAOC,aAAa,SAC7C,SAAC,KAAD,CAAclB,KAAK,QAAQmB,UAAU,YAEvC,UAAC,KAAD,uBAEE,SAAC,KAAD,CAAOnB,KAAK,WAAWiB,KAAK,WAAWC,aAAa,SACpD,SAAC,KAAD,CAAclB,KAAK,WAAWmB,UAAU,YAE1C,SAAC,KAAD,CAAQF,KAAK,SAAb,0BAIP,C,0CC1DOV,EAAiBa,EAAQ,MAAzBb,aAMR,UAJiB,WACf,OAAO,SAACA,EAAD,GACR,C","sources":["components/RegisterForm/RegisterForm.jsx","pages/Register.js"],"sourcesContent":["import React from 'react';\nimport { Formik, Field } from 'formik';\nimport {\n  Button,\n  ErrorMessage,\n  Form,\n  FormField,\n} from '../ContactForm/ContactForm.styled';\nimport * as Yup from 'yup';\nimport { useDispatch } from 'react-redux';\nimport { register } from 'redux/auth/operations';\n\nconst FornSchema = Yup.object().shape({\n  name: Yup.string().max(20).required('Required'),\n  email: Yup.string().email('Invalid email address').required('Required'),\n  password: Yup.string()\n    .min(6, 'Password must be 8 characters long')\n    .matches(/[0-9]/, 'Password requires a number')\n    .matches(/[a-z]/, 'Password requires a lowercase letter')\n    .required('Required'),\n});\n\nexport const RegisterForm = () => {\n  const dispath = useDispatch();\n\n  return (\n    <Formik\n      initialValues={{\n        name: '',\n        email: '',\n        password: '',\n      }}\n      onSubmit={(values, actions) => {\n        dispath(register(values));\n        actions.resetForm();\n      }}\n      validationSchema={FornSchema}\n    >\n      <Form>\n        <FormField>\n          Name\n          <Field name=\"name\" type=\"text\" autoComplete=\"off\" />\n          <ErrorMessage name=\"name\" component=\"div\" />\n        </FormField>\n        <FormField>\n          Email\n          <Field name=\"email\" type=\"text\" autoComplete=\"off\" />\n          <ErrorMessage name=\"email\" component=\"div\" />\n        </FormField>\n        <FormField>\n          Password\n          <Field name=\"password\" type=\"password\" autoComplete=\"off\" />\n          <ErrorMessage name=\"password\" component=\"div\" />\n        </FormField>\n        <Button type=\"submit\">Register</Button>\n      </Form>\n    </Formik>\n  );\n};\n","const { RegisterForm } = require('components/RegisterForm/RegisterForm');\n\nconst Register = () => {\n  return <RegisterForm />;\n};\n\nexport default Register;\n"],"names":["FornSchema","Yup","shape","name","max","required","email","password","min","matches","RegisterForm","dispath","useDispatch","initialValues","onSubmit","values","actions","register","resetForm","validationSchema","type","autoComplete","component","require"],"sourceRoot":""}