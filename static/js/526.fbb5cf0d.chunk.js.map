{"version":3,"file":"static/js/526.fbb5cf0d.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.styled.js","components/Modal/Modal.styled.js","components/Modal/Modal.jsx","components/ContactList/ContactListItem.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","pages/Contacts.js"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nexport const getContact = state => state.contacts.items;\nexport const getFilter = state => state.filter;\nexport const getIsLoading = state => state.contacts.isLoading;\nexport const getError = state => state.contacts.error;\n\nexport const selectFilteredContacts = createSelector(\n  [getContact, getFilter],\n  (contacts, filterValue) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filterValue.toLowerCase().trim())\n    );\n  }\n);\n","import React from 'react';\nimport { Formik, Field } from 'formik';\nimport { Button, ErrorMessage, Form, FormField } from './ContactForm.styled';\nimport * as Yup from 'yup';\nimport { SlUserFollow } from 'react-icons/sl';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getContact } from 'redux/contacts/selectors';\nimport { Report } from 'notiflix';\nimport { addContact } from 'redux/contacts/operations';\n\nconst phoneRegExp = /^(\\s*)?(\\+)?([- _():=+]?\\d[- _():=+]?){3,14}(\\s*)?$/;\n\nconst FornSchema = Yup.object().shape({\n  name: Yup.string()\n    .min(3, 'Too Short Name!')\n    .max(20, 'Too Long Name!')\n    .required('Required'),\n  number: Yup.string()\n    .matches(phoneRegExp, 'Phone number is not valid')\n    .required('Required'),\n});\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContact);\n\n  return (\n    <Formik\n      initialValues={{\n        name: '',\n        number: '',\n      }}\n      onSubmit={(values, actions) => {\n        if (\n          contacts.some(\n            contact => contact.name.toLowerCase() === values.name.toLowerCase()\n          )\n        ) {\n          return Report.warning(\n            'Warning',\n            'The contact to that name already exists!',\n            'Okay'\n          );\n        }\n        dispatch(\n          addContact({\n            ...values,\n          })\n        );\n        actions.resetForm();\n      }}\n      validationSchema={FornSchema}\n    >\n      <Form>\n        <FormField>\n          Name\n          <Field name=\"name\" type=\"text\" autoComplete=\"off\" />\n          <ErrorMessage name=\"name\" component=\"div\" />\n        </FormField>\n        <FormField>\n          Number\n          <Field name=\"number\" type=\"text\" autoComplete=\"off\" />\n          <ErrorMessage name=\"number\" component=\"div\" />\n        </FormField>\n        <Button type=\"submit\">\n          <SlUserFollow size=\"18px\" />\n          Add contact\n        </Button>\n      </Form>\n    </Formik>\n  );\n};\n","import styled from 'styled-components';\n\nexport const ContactsList = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 18px;\n`;\n\nexport const Contact = styled.li`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`;\n\nexport const Info = styled.p`\n  display: flex;\n  gap: 8px;\n  align-items: center;\n  font-size: 20px;\n  font-weight: 600;\n`;\n\nexport const Wrap = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n`;\n\nexport const ButtonsWrap = styled.div`\n  display: flex;\n  gap: 8px;\n`;\n\nexport const LabelInfo = styled.label`\n  display: flex;\n  gap: 8px;\n  align-items: center;\n  font-size: 15px;\n  font-weight: 600;\n`;\n","import styled from 'styled-components';\n\nexport const Overlay = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: rgba(29, 28, 28, 0.8);\n  z-index: 1200;\n`;\nexport const ModalWindow = styled.div`\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n\n  width: 420px;\n  max-width: calc(100vw - 48px);\n  max-height: calc(100vh - 24px);\n`;\n","import { ModalWindow, Overlay } from './Modal.styled';\n\nexport const Modal = ({ children }) => {\n  return (\n    <Overlay>\n      <ModalWindow>{children}</ModalWindow>\n    </Overlay>\n  );\n};\n","import { useState } from 'react';\nimport { Button } from 'components/ContactForm/ContactForm.styled';\nimport { ButtonsWrap, Contact, Info, Wrap } from './ContactList.styled';\nimport PropTypes from 'prop-types';\nimport { SlUserUnfollow, SlPhone, SlSocialGithub } from 'react-icons/sl';\nimport { FiEdit3 } from 'react-icons/fi';\nimport { BsCheck2Circle } from 'react-icons/bs';\nimport { Modal } from 'components/Modal/Modal';\nimport { Formik, Field } from 'formik';\nimport {\n  ErrorMessage,\n  Form,\n  FormField,\n} from '../ContactForm/ContactForm.styled';\nimport * as Yup from 'yup';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact, editContact } from 'redux/contacts/operations';\n\nconst phoneRegExp = /^(\\s*)?(\\+)?([- _():=+]?\\d[- _():=+]?){3,14}(\\s*)?$/;\n\nconst FornSchema = Yup.object().shape({\n  name: Yup.string()\n    .min(3, 'Too Short Name!')\n    .max(20, 'Too Long Name!')\n    .required('Required'),\n  number: Yup.string()\n    .matches(phoneRegExp, 'Phone number is not valid')\n    .required('Required'),\n});\n\nexport const ContactListItem = ({ contact }) => {\n  const [name, setName] = useState(contact.name);\n  const [number, setNumber] = useState(contact.number);\n  const [isOpenModal, setIsOpenModal] = useState(false);\n\n  const dispatch = useDispatch();\n\n  const handelDeleteContact = contactId => {\n    dispatch(deleteContact(contactId));\n  };\n\n  const openModal = () => {\n    setIsOpenModal(true);\n  };\n\n  const closeModal = () => {\n    setIsOpenModal(false);\n  };\n\n  return (\n    <Contact key={contact.id}>\n      {isOpenModal && (\n        <Modal>\n          <Formik\n            initialValues={{\n              name,\n              number,\n            }}\n            onSubmit={values => {\n              setName(values.name);\n              setNumber(values.number);\n              dispatch(\n                editContact({\n                  id: contact.id,\n                  name: values.name,\n                  number: values.number,\n                })\n              );\n              closeModal();\n            }}\n            validationSchema={FornSchema}\n          >\n            <Form>\n              <FormField>\n                Name\n                <Field name=\"name\" type=\"text\" autoComplete=\"off\" />\n                <ErrorMessage name=\"name\" component=\"div\" />\n              </FormField>\n              <FormField>\n                Number\n                <Field name=\"number\" type=\"text\" autoComplete=\"off\" />\n                <ErrorMessage name=\"number\" component=\"div\" />\n              </FormField>\n              <Button type=\"submit\">\n                <BsCheck2Circle size=\"18px\" />\n                Save changes\n              </Button>\n            </Form>\n          </Formik>\n        </Modal>\n      )}\n      <Wrap>\n        <Info>\n          <SlSocialGithub size=\"20px\" />\n          {contact.name}:\n        </Info>\n        <Info>\n          <SlPhone size=\"20px\" />\n          {contact.number}\n        </Info>\n      </Wrap>\n      <ButtonsWrap>\n        <Button\n          type=\"button\"\n          onClick={() => {\n            handelDeleteContact(contact.id);\n          }}\n        >\n          <SlUserUnfollow size=\"18px\" />\n        </Button>\n        <Button type=\"button\" onClick={openModal}>\n          <FiEdit3 size=\"18px\" />\n        </Button>\n      </ButtonsWrap>\n    </Contact>\n  );\n};\n\nContactListItem.propTypes = {\n  contact: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }).isRequired,\n};\n","import React from 'react';\nimport { ContactsList } from './ContactList.styled';\nimport { ContactListItem } from './ContactListItem';\nimport { useSelector } from 'react-redux';\nimport { selectFilteredContacts } from 'redux/contacts/selectors';\n\nexport const ContactList = () => {\n  const contacts = useSelector(selectFilteredContacts);\n\n  return (\n    <ContactsList>\n      {contacts.map(contact => {\n        return <ContactListItem key={contact.id} contact={contact} />;\n      })}\n    </ContactsList>\n  );\n};\n","import { FormField } from 'components/ContactForm/ContactForm.styled';\nimport React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { setFilterValue } from 'redux/contacts/filterSlice';\nimport { getFilter } from 'redux/contacts/selectors';\n\nexport const Filter = () => {\n  const value = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  const handelSetFilter = event => {\n    dispatch(setFilterValue(event.target.value));\n  };\n\n  return (\n    <FormField>\n      Find contacts by name\n      <input type=\"text\" value={value} onChange={handelSetFilter} />\n    </FormField>\n  );\n};\n","import { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { getError, getIsLoading } from 'redux/contacts/selectors';\n\nconst Contacts = () => {\n  const isLoading = useSelector(getIsLoading);\n  const error = useSelector(getError);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n      {isLoading && !error && (\n        <p style={{ marginBottom: '16px' }}>Request in progress...</p>\n      )}\n      <ContactList />\n    </>\n  );\n};\n\nexport default Contacts;\n"],"names":["getContact","state","contacts","items","getFilter","filter","getIsLoading","isLoading","getError","error","selectFilteredContacts","createSelector","filterValue","contact","name","toLowerCase","includes","trim","FornSchema","Yup","shape","min","max","required","number","matches","ContactForm","dispatch","useDispatch","useSelector","initialValues","onSubmit","values","actions","some","Report","addContact","resetForm","validationSchema","type","autoComplete","component","size","ContactsList","styled","Contact","Info","Wrap","ButtonsWrap","Overlay","ModalWindow","Modal","children","ContactListItem","useState","setName","setNumber","isOpenModal","setIsOpenModal","editContact","id","onClick","contactId","deleteContact","ContactList","map","Filter","value","onChange","event","setFilterValue","target","useEffect","fetchContacts","style","marginBottom"],"sourceRoot":""}